"use server"

// This is a server-side only function
import PDFDocument from "pdfkit"
import { createWriteStream } from "fs"
import { join } from "path"
import { mkdir } from "fs/promises"

export async function generatePDF(packageData: any): Promise<string> {
  return new Promise(async (resolve, reject) => {
    try {
      // Create pdfs directory if it doesn't exist
      const pdfDir = join(process.cwd(), "public", "pdfs")
      try {
        await mkdir(pdfDir, { recursive: true })
      } catch (error) {
        // Ignore if directory already exists
      }

      const doc = new PDFDocument({
        size: "A4",
        margin: 50,
        info: {
          Title: `Package Tracking - ${packageData.tracking_number}`,
          Author: "Greenroute Delivery",
          Creator: "Greenroute Delivery PDF Generator",
        },
      })

      // Generate a unique filename
      const filename = `package-${packageData.tracking_number}-${Date.now()}.pdf`
      const filepath = join(process.cwd(), "public", "pdfs", filename)
      
      console.log("Creating PDF file at:", filepath)
      const stream = createWriteStream(filepath)

      // Set up event handlers before piping
      stream.on('error', (err) => {
        console.error("Stream error:", err)
        reject(err)
      })

      stream.on('finish', () => {
        console.log("PDF file created successfully")
        resolve(`/pdfs/${filename}`)
      })

      // Pipe the PDF to the file
      doc.pipe(stream)

      // Add header
      doc
        .fontSize(25)
        .text("Greenroute Delivery", { align: "center" })
        .moveDown()
        .fontSize(20)
        .text("Package Tracking Details", { align: "center" })
        .moveDown(2)

      // Add package details
      doc
        .fontSize(14)
        .text("Package Information", { underline: true })
        .moveDown()
        .fontSize(12)
        .text(`Tracking Number: ${packageData.tracking_number}`)
        .text(`Status: ${packageData.status}`)
        .text(`Description: ${packageData.description}`)
        .text(`Weight: ${packageData.weight} kg`)
        .text(`Dimensions: ${packageData.dimensions.length}x${packageData.dimensions.width}x${packageData.dimensions.height} cm`)
        .moveDown()

      // Add sender and recipient details
      doc
        .fontSize(14)
        .text("Sender & Recipient", { underline: true })
        .moveDown()
        .fontSize(12)
        .text("Sender:")
        .text(`Name: ${packageData.sender.fullName}`)
        .text(`Email: ${packageData.sender.email}`)
        .text(`Phone: ${packageData.sender.phone}`)
        .text(`Address: ${packageData.sender.address}`)
        .moveDown()
        .text("Recipient:")
        .text(`Name: ${packageData.recipient.fullName}`)
        .text(`Email: ${packageData.recipient.email}`)
        .text(`Phone: ${packageData.recipient.phone}`)
        .text(`Address: ${packageData.recipient.address}`)
        .moveDown()

      // Add payment details if visible
      if (packageData.payment.isVisible) {
        doc
          .fontSize(14)
          .text("Payment Information", { underline: true })
          .moveDown()
          .fontSize(12)
          .text(`Amount: $${packageData.payment.amount}`)
          .text(`Status: ${packageData.payment.isPaid ? "Paid" : "Unpaid"}`)
          .text(`Method: ${packageData.payment.method || "Not specified"}`)
          .moveDown()
      }

      // Add tracking history
      doc
        .fontSize(14)
        .text("Tracking History", { underline: true })
        .moveDown()

      if (packageData.checkpoints && packageData.checkpoints.length > 0) {
        packageData.checkpoints.forEach((checkpoint: any) => {
          try {
            doc
              .fontSize(12)
              .text(`Location: ${checkpoint.location || 'Unknown'}`)
              .text(`Status: ${checkpoint.status || 'Unknown'}`)
              .text(`Description: ${checkpoint.description || 'No description'}`)
              .text(`Time: ${new Date(checkpoint.timestamp).toLocaleString()}`)
              .moveDown()
          } catch (error) {
            console.error("Error adding checkpoint to PDF:", error)
            doc.text("Error including checkpoint details")
              .moveDown()
          }
        })
      } else {
        doc.text("No tracking history available")
          .moveDown()
      }

      // Add footer
      const pageHeight = doc.page.height
      doc
        .fontSize(10)
        .text(
          "Generated by Greenroute Delivery",
          doc.page.width / 2,
          pageHeight - 50,
          { align: "center" }
        )
        .text(
          new Date().toLocaleDateString(),
          doc.page.width / 2,
          pageHeight - 35,
          { align: "center" }
        )

      // Finalize the PDF
      doc.end()
      
    } catch (error) {
      console.error("PDF generation error:", error)
      reject(error)
    }
  })
} 