'use client';

import { useEffect, useState } from 'react';
import { jsPDF } from 'jspdf';
import QRCode from 'qrcode';
import { PackageData } from '@/types';

interface PDFGeneratorProps {
  packageData: PackageData;
}

export default function PDFGenerator({ packageData }: PDFGeneratorProps) {
  const [pdfUrl, setPdfUrl] = useState<string | null>(null);

  useEffect(() => {
    const generatePDF = async () => {
      try {
        const doc = new jsPDF();
        
        // Add header
        doc.setFontSize(24);
        doc.setFont('helvetica', 'bold');
        doc.text('Package Details', 105, 20, { align: 'center' });
        
        // Generate QR code
        const qrCodeData = await QRCode.toDataURL(packageData.tracking_number);
        doc.addImage(qrCodeData, 'PNG', 80, 30, 50, 50);
        
        // Add package details
        doc.setFontSize(14);
        doc.setFont('helvetica', 'normal');
        let yPos = 100;
        
        doc.text(`Tracking Number: ${packageData.tracking_number}`, 20, yPos);
        yPos += 10;
        doc.text(`Status: ${getStatusText(packageData.status)}`, 20, yPos);
        yPos += 10;
        doc.text(`Weight: ${packageData.weight} kg`, 20, yPos);
        yPos += 10;
        doc.text(`Dimensions: ${packageData.dimensions.length} x ${packageData.dimensions.width} x ${packageData.dimensions.height} cm`, 20, yPos);
        yPos += 10;
        doc.text(`Recipient: ${packageData.recipient.fullName}`, 20, yPos);
        yPos += 10;
        doc.text(`Address: ${packageData.recipient.address}`, 20, yPos);
        
        // Add footer
        doc.setFontSize(10);
        doc.text('Generated by Greenroute Delivery', 105, 280, { align: 'center' });
        
        // Convert to URL
        const pdfBlob = doc.output('blob');
        const pdfUrl = URL.createObjectURL(pdfBlob);
        setPdfUrl(pdfUrl);
      } catch (error) {
        console.error('Error generating PDF:', error);
      }
    };

    generatePDF();
  }, [packageData]);

  if (!pdfUrl) {
    return <div>Generating PDF...</div>;
  }

  return (
    <div className="flex flex-col items-center gap-4">
      <iframe
        src={pdfUrl}
        className="w-full h-[600px] border rounded-lg"
        title="Package Details PDF"
      />
      <a
        href={pdfUrl}
        download={`package-${packageData.tracking_number}.pdf`}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Download PDF
      </a>
    </div>
  );
}

// Helper function to format status text
const getStatusText = (status: string) => {
  switch (status) {
    case "in_warehouse": return "In Warehouse";
    case "in_transit": return "In Transit";
    case "delivered": return "Delivered";
    default: return status;
  }
}; 